edututor_ai/
├── main.py
├── tutor.py
├── quiz.py
├── db.py
├── requirements.txt
└── README.md
🔹 Code Breakdown
📄 requirements.txt
txt
Copy
Edit
openai
sqlite3
rich
(Use pip install openai rich to install dependencies.)

📄 main.py
python
Copy
Edit
from tutor import EduTutor
from quiz import Quiz
from db import init_db

def main():
    init_db()
    tutor = EduTutor()
    quiz = Quiz()

    print("📘 Welcome to EduTutor-AI!")
    while True:
        print("\n1. Ask a question")
        print("2. Take a quiz")
        print("3. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            query = input("Ask me anything: ")
            response = tutor.ask_question(query)
            print(f"\n📚 Answer: {response}")

        elif choice == "2":
            quiz.take_quiz()

        elif choice == "3":
            print("Goodbye!")
            break

        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()
📄 tutor.py
python
Copy
Edit
import openai

openai.api_key = 'YOUR_API_KEY'

class EduTutor:
    def ask_question(self, question):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful educational tutor."},
                    {"role": "user", "content": question},
                ]
            )
            return response['choices'][0]['message']['content'].strip()
        except Exception as e:
            return f"Error: {e}"
📄 quiz.py
python
Copy
Edit
import random
from db import save_result

questions = {
    "Math": [("What is 2 + 2?", "4"), ("What is 9 x 3?", "27")],
    "Science": [("What planet is known as the Red Planet?", "Mars")],
    "English": [("What is the synonym of 'happy'?", "joyful")]
}

class Quiz:
    def take_quiz(self):
        score = 0
        print("\n📘 Starting Quiz:")
        for subject, qs in questions.items():
            print(f"\nSubject: {subject}")
            for q, a in qs:
                user_ans = input(f"{q} ")
                if user_ans.strip().lower() == a.lower():
                    print("✅ Correct!")
                    score += 1
                else:
                    print(f"❌ Incorrect. The correct answer was {a}.")
        print(f"\n🎯 Your total score: {score}")
        save_result(score)
📄 db.py
python
Copy
Edit
import sqlite3

def init_db():
    conn = sqlite3.connect("quiz_results.db")
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS results (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            score INTEGER
        )
    ''')
    conn.commit()
    conn.close()

def save_result(score):
    conn = sqlite3.connect("quiz_results.db")
    c = conn.cursor()
    c.execute("INSERT INTO results (score) VALUES (?)", (score,))
    conn.commit()
    conn.close()
🔹 How to Run
bash
Copy
Edit
pip install -r requirements.txt
python main.py
🔹 Optional Enhancements
✅ Add voice interface using speechrecognition and pyttsx3

✅ Streamlit web interface

✅ User login & progress tracking